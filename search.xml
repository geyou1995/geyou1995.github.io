<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java8新特性Lambda和Stream]]></title>
    <url>%2F2018%2F09%2F18%2FJava8%E6%96%B0%E7%89%B9%E6%80%A7Lambda%E5%92%8CStream%2F</url>
    <content type="text"><![CDATA[目前项目应用的是Java 1.8版本,在项目中看到其他小伙伴使用了奇特的编码方式，许多行代码简化成了一行，原来是Java8的特性Lambda和Stream,结合代码和网上查资料学习了一下，并将相关的的知识做了下总结. lambda表达式lambda简单的理解就是一个匿名方法，一段带有输入参数的可执行语句块. 语法：（）-&gt; {} (小括号里是参数，大括号里是方法体) 特点：1.参数类型可以省略，编译器可以从上下文环境中推断出来 2.当lambda表达式的参数个数只有一个的时候，小括号可以省略 3.当lambda表达式只包含一条语句时，可以省略大括号，return，语句结尾的分号 4.lambda表达式可以访问外部变量，但是要求这个变量不可变（final修饰） 方法引用：1.类实例引用： Person::getName 2.类静态方法引用：Max::max 构造器引用：Person::new（等同于 x-&gt;new Person(x)） StreamStream（流）是一个来自数据源的元素队列并支持聚合操作。数据源一般是数组或集合等，进行聚合操作可以获取想要的结果。 基本步骤：获取一个数据源（source）-&gt; 数据转化 -&gt; 执行操作获取想要的结果.(简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果) 创建Stream1.Stream静态方法：Stream.of(); 2.Collection子类获取Stream（最常用）：list.Stream(); Stream流操作 *Intermediate（中间）: 一个流可以跟多个中间操作，主要是打开流对数据进行某种映射或过滤.常见操作: map() - 对stream里的元素进行映射转化 filter() - 对Stream包含对元素按给定的条件过滤 distinct() - 对stream包含对元素进行去重 sorted() - 对stream包含对元素排序 peek() - 生成一个包含原Stream的所有元素的新Stream，同时会提供一个消费函数（Consumer实例），新Stream每个元素被消费的时候都会执行给定的消费函数 limit() - 对Stream里的元素取前n个 skip(n) - 对stream里的元素丢弃前n个，获取之后的元素 parallel() - 将一个顺序执行的流转变成一个并发的流（还有一种Collection.parallelStream()） sequential() - 一个并行流转换成一个顺序流 unordered() - 实现无序流 Terminal(终端): 一个流只能有一个终端操作，这是流对最后一个操作，用来处理结果数据。常见操作: forEach() - 遍历结果数据（并行处理） forEachOrdered - 遍历结果数据（顺序处理） toArray（） - 将数据输入到数组中 reduce（） - 把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合 collect（） - 实现了很多归约操作，例如将流转换成集合和聚合元素 count() - 获取stream里的元素个数 min() - 最小值 max() - 最大值 anyMatch() - Stream中是否存在任何一个元素满足匹配条件 allMatch() - 是不是Stream中的所有元素都满足给定的匹配条件 noneMatch() - 是不是Stream中的所有元素都不满足给定的匹配条件 findFirst() - 返回Stream中的第一个元素，如果Stream为空，返回空Optional findAny() - 返回这个Stream中，取到的任何一个对象 简单示例代码 参考：https://yuque.antfin-inc.com/mdc/doc/rhihn7]]></content>
      <categories>
        <category>开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mac系统Idea常用快捷键]]></title>
    <url>%2F2018%2F09%2F09%2FMac%E7%B3%BB%E7%BB%9F%E4%B8%8BIdea%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[之前一直使用的Java编译工具是eclipse,进新公司之后,公司配了一台Mac并且后端都用IntelliJ IDEA开发,不能脱离团队呀,果断入手了IDEA,不得不说比eclipse更加的智能好用,为了提高开发效率，所以决定整理一下IDEA的常用快捷键,不想每次都配,所以就决定用IDEA默认的快捷键,用的是Mac OS X 10.5+ 但是Mac系统中与IDEA的快捷键有些冲突,可以把Mac相关冲突的快捷键更改或取消掉.下面整理了平常开发中常用的快捷键，以便于更好的记忆和熟练使用. Mac键盘符号和修饰健说明⌘ Command⇧ Shift⌥ Option⌃ Control↩︎ Return/Enter⌫ Delete⌦ 向前删除键（Fn+Delete）↑ 上箭头↓ 下箭头← 左箭头→ 右箭头⇞ Page Up（Fn+↑）⇟ Page Down（Fn+↓）Home Fn + ←End Fn + →⇥ 右制表符（Tab键）⇤ 左制表符（Shift+Tab）⎋ Escape (Esc) Editing编辑123456789101112131415161718192021222324252627282930Control+Space 基本的代码补全(补全任何类,方法,变量) 注意这里与Mac系统的输入法快捷键冲突Control+Shift+Space 智能代码补全 (过滤器方法列表和变量的预期类型）Command+Shift+Enter 自动结束代码,行末添加分号Command+P 显示方法的参数Control+J 快速显示文档Command+鼠标放在代码上 显示代码简要信息Command+N 生成代码（getter、setter、构造函数、hashCode/equals,toString,实现接口方法）这个还有其他快捷键我只记这一种了Control+O 覆盖方法(重写父类方法)Control+I 实现接口方法(我直接记Command+N,也能实现接口方法)Command+Option+T 包围代码(try catch,if else,do while等)Command+/ 行注释代码(再按一次就是取消注释)Command+Option+/ 块注释Option+方向上 连续选中代码块Option+方向下 减少选中的代码块Control+Shift+Q 显示上下文信息Option+Enter 显示意向动作和快速修复代码Command+Option+L 格式化代码Control+Option+O 优化importTab 缩进代码Command+C 复制Command+V 粘贴Command+X 剪切Command+D 复制当前行或选定的块Command+Delete 删除当前行或选定的行的块Control+Shift+J 智能的将代码拼接成一行Command+Enter 智能的拆分拼接的行Command+加号/减号 展开/折叠代码块Command+Shift+加号/减号 展开/折叠所有代码块Command+W 关闭活动的编辑器选项Command+Shift+上下 上下移动代码 Search/Replace（查询/替换)1234Command+F 文件内查找Command+Shift+F 全局查找Command+G 查找模式下向下查找Command+Shift+G 查找模式下向上查找 Usage Search（使用查询）1234Option+F7 在文件中查找用到的地方Command+F7 在类中查找用到的地方Command+Shift+F7 在类中显示(颜色标记)用到的地方Command+Option+F7 显示用法 Compile and Run（编译和运行）12345Command+F9 编译ProjectCommand+Shift+F9 编译选择的文件,包或模块Control+Option+R 弹出Run的可选菜单Control+Option+R 弹出Debug的可选菜单Control+D 调试 Debug调试123456F8 进入下一步,不进入当前方法内F7 进入下一步,如果当前断点式方法,则进入方法内Shift+F8 跳出Option+F9 运行到光标停留处F9 放开debug Command+Shift+F8 查看断点信息 Navigation（导航）123456Shift+Shift 查找文件Command+L 跳转行Command+E 显示最近打开的文件记录列表Command+Option+方向键左/右 退回/前进到上一个操作的地方Command+B 或Command+鼠标左键 进入方法或变量的接口或是定义处Command+Option+B 越过接口,直接跳掉实现处 Refactoring（重构）1234F5 复制文件到指定目录Command+delete 在文件上安全删除文件,弹出确认框Shift+F6 重命名文件Command+Option+M 将选中的代码提取为方法 General（通用）1Command+, 打开idea系统设置]]></content>
      <categories>
        <category>开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[brave heart]]></title>
    <url>%2F2018%2F08%2F18%2F%E6%88%91%E5%B0%B1%E6%98%AF%E5%86%99%E7%9D%80%E7%8E%A9%E7%8E%A9%E7%9A%84%2F</url>
    <content type="text"><![CDATA[不论是谁 都有想去逃避的时候只要在那一刻发挥出潜藏的那种力量 便可以清除前路上的障碍让这个蓝色星球 继续闪耀着光芒这一定是只有你才能做到的事情 紧紧抓住 你所拥有的梦想守护着 你重要的朋友使自己变得更坚强潜在的未知力量 像火焰那般被点燃你的所有愿望 绝非南柯一梦都一定可以实现天空绝不会天天放晴 所以当寒冷的雨滴下落时 便撑起雨伞吧生活是没有地图可以指引的 所以我们是自由的随心所欲 即管前往任何地方所以冲刺吧!! 用比风还要快的速度]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>song</tag>
      </tags>
  </entry>
</search>
