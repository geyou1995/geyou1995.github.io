<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[设计模式之工厂方法模式]]></title>
    <url>%2F2020%2F09%2F04%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[简单工厂在工厂方法模式之前，先了解简单工厂.首先简单工厂不是一个标准的设计模式！简单工厂不是一个标准的设计模式！简单工厂不是一个标准的设计模式！简单的本质就是选择实现。工厂就是用来创建对象的，根据传入的参数，返回对应的实例对象。优点：帮助封装、解耦。缺点：不符合开闭原则，有新对象就要修改工厂类的代码. 1234567// 下面分别是小米手机类、华为手机类和苹果手机类// 1.正常创建使用// 我们创建它们的时候需要一个一个对象去newMiPhone mi = new MiPhone();IPhone i = new IPhone();HwPhone i = new HWPhone();// todo... 12345678910111213141516171819202122232425// 2.使用简单工厂// 都实现同一个接口或继承同一个对象PhoneHWPhone implements Phone IPhone implements Phone MiPhone implements Phone // 手机工厂类public class PhoneFactory &#123; public static Phone makePhone(String type) throws Exception &#123; if ("Mi".equals(type)) &#123; return new MiPhone(); &#125; else if ("I".equals(type)) &#123; return new IPhone(); &#125; else if ("HW".equals(type)) &#123; return new HWPhone(); &#125;else &#123; throw new Exception("没有该类型产品 type=" + type); &#125; &#125;&#125;// 获取Phone mi = PhoneFactory.makePhone("Mi");Phone i = PhoneFactory.makePhone("I");Phone hw = PhoneFactory.makePhone("HW");// todo... 总结简单工厂就是把对象全部向一个工厂里创建,根据类型参数返回不同的实力对象.优点：封装、实现客户端和具体实现类的解耦.缺点：不符合开闭原则，每次需要添加新的产品对象使都要修改工厂类. 工厂方法模式定义定义一个用于创建对象的接口,让子类决定实例化哪个类，工厂方法使一个类的实例化延迟到其子类。 结构 Creator:抽象工厂角色，是工厂方法模式的核心，与应用程序无关。ConcreteCreator：具体的工厂，Product方法的具体实现。Product：抽象产品角色，声明工厂方法，通常会返回一个Product类型的实例对象ConcreteProduct：具体的产品对象，实现抽象产品的所有方法。 具体示例代码1.定义一个抽象工厂 123public interface AbstractFactory &#123; Phone mackPhone();&#125; 2.产品各自的工厂实现这个抽象工厂,重写工厂方法，可以看到各自的工厂生产各自的产品 123456789101112131415161718192021// 苹果手机工厂public class IFactory implements AbstractFactory &#123; @Override public Phone mackPhone() &#123; return new IPhone(); &#125;&#125;// 小米手机工厂public class MIFactory implements AbstractFactory &#123; @Override public Phone mackPhone() &#123; return new MiPhone(); &#125;&#125;// 华为手机工厂public class HWFactory implements AbstractFactory &#123; @Override public Phone mackPhone() &#123; return new HWPhone(); &#125;&#125; 3.客户端使用 12345678910public static void main(String[] args) &#123; MIFactory miFactory = new MIFactory(); miFactory.mackPhone(); IFactory iFactory = new IFactory(); iFactory.mackPhone(); // 新增一个类型产品，只需添加新工厂，不要修改原有工厂 HWFactory hwFactory = new HWFactory(); hwFactory.mackPhone(); &#125; 总结相比较于简单工厂，工厂方法模式就是将工厂抽象化，将具体的产品分布在不同的具体工厂中操作,而且复合开闭原则，新的产品只要再写一个新的工厂就行，不用修改原来的工厂类。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式-构建者模式]]></title>
    <url>%2F2020%2F08%2F29%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%9E%84%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[定义将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。 结构与说明 Builder: 构建者接口，定义创建一个Product对象所需的各个部件的操作。ConcreteBuilder:具体的构建器实现，实现各个部件的创建，并负责组装Product对象的各个部件，同时还提供一个让用户获取组装完成后的产品对象的方法。Director:指导者，主要用来使用Builder接口，以一个统一的过程来构建所需要的Product对象。Product: 产品，表示被构建器构建的复杂对象。 使用场景现在有这样一个Hero类需要构造 1234567891011121314151617181920public class Hero&#123; // 代号(必须) private String code; // 姓名(必须) private String name; // 年龄(必须) private Integer age; // 主技能(必须) private String skillMain; // 技能1（可选） private String skill1; // 技能2（可选） private String skill2; // 技能3（可选） private String skill3; // 技能4（可选） private String skill4; ... &#125; 第一种：折叠构造函数模式通过传参构造需要的对象 123456789101112131415161718192021222324public Hero(String code, String name, Integer age, String skillMain) &#123; this.code = code; this.name = name; this.age = age; this.skillMain = skillMain; &#125; public Hero(String code, String name, Integer age, String skillMain, String skill1) &#123; this.code = code; this.name = name; this.age = age; this.skillMain = skillMain; this.skill1 = skill1; &#125; public Hero(String code, String name, Integer age, String skillMain, String skill1, String skill2) &#123; this.code = code; this.name = name; this.age = age; this.skillMain = skillMain; this.skill1 = skill1; this.skill2 = skill2; &#125;... 第二种：JavaBean模式创建一个对象,对其中的成员属性依次set(),get() 123456789101112131415161718192021// 无参构造方法public Hero() &#123; &#125; public String getCode() &#123; return code; &#125; public void setCode(String code) &#123; this.code = code; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; ... 从上述两种方法可以看出，当一个类对象非常复杂时，以上方法都有缺点第一种方式：代码阅读以及使用不方便,每次使用需要知道调用哪种构造方法，当参数很多时还需要注意参数顺序，易出错。第二种方式：在构建的过程中对象的状态容易发生变化，造成错误。针对以上问题，所以才有了Builder模式。当一个类对象非常复杂，构造的参数很多，并且这些参数是可选的，可以考虑使用构建者。 实现1.在Hero类中创建一个静态内部类Builder，参数和Hero类一样。(必要的参数用final修饰)2.将Hero的构造方法私有，且入参为Builder类，防止外部创建。只能由外部调用Builder类创建，所以也要在Builder里提供一个方法，返回Hero对象。3.Hero类的参数提供get()方法，Builder类的参数提供set()方法，返回值都为Builder对象，形成链式编程。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100public class Hero &#123; /** * 姓名(必须) */ private final String name; /** * 主技能(必须) */ private final String skillMain; /** * 技能1（可选） */ private String skill1; /** * 技能2（可选） */ private String skill2; /** * 私有化Hero构造方法，外部只能通过Builder获取 */ private Hero(Builder builder) &#123; this.name = builder.name; this.skillMain = builder.skillMain; this.skill1 = builder.skill1; this.skill2 = builder.skill2; &#125; /** * 提供获取成员变量的方法 */ public String getName() &#123; return name; &#125; public String getSkillMain() &#123; return skillMain; &#125; public String getSkill1() &#123; return skill1; &#125; public String getSkill2() &#123; return skill2; &#125; @Override public String toString() &#123; return "Hero&#123;" + "name='" + name + '\'' + ", skillMain='" + skillMain + '\'' + ", skill1='" + skill1 + '\'' + ", skill2='" + skill2 + '\'' + '&#125;'; &#125; public static class Builder &#123; // 姓名(必须) private final String name; // 主技能(必须) private final String skillMain; // 技能1（可选） private String skill1; // 技能2（可选） private String skill2; /** * final修饰的参数为必传 */ public Builder(String name, String skillMain) &#123; this.name = name; this.skillMain = skillMain; &#125; /** * 设置成员参数，返回builder对象，链式编程 * * @param skill1 */ public Builder setSkill1(String skill1) &#123; this.skill1 = skill1; return this; &#125; public Builder setSkill2(String skill2) &#123; this.skill2 = skill2; return this; &#125; // 提供一个返回Hero的方法 public Hero builder() &#123; return new Hero(this); &#125; &#125;&#125; 测试结果： 123456789public class Test &#123; public static void main(String[] args) &#123; Hero.Builder builder = new Hero.Builder("萧峰", "降龙十八掌"); Hero hero = builder.setSkill1("打狗棒法").setSkill2("少林武学").builder(); System.out.println(hero); &#125;&#125;-------------------------------------------------------------------Hero&#123;name='萧峰', skillMain='降龙十八掌', skill1='打狗棒法', skill2='少林武学'&#125; 总结可以看出，本文只是用了传统构建者模式的变种。这也是平时项目开发中遇到常用的方式了，继续练习～]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[类加载器和双亲委派机制]]></title>
    <url>%2F2020%2F08%2F22%2F%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[类的加载过程加载在硬盘上查找通过I/O读取字节码文件,生成类的二进制数据（.class文件） 验证校验生成的字节码文件的正确性 准备给类的静态变量分配内存,并赋予默认值 解析符号引用转化为直接引用 初始化对类的静态变量初始化为指定的值,执行静态代码块 注：类被加载到方法区中主要包含 运行时常量、类型信息、字段信息、方法信息、类加载器的引用（这个类到类加载器实例等引用）、对应classs实例的引用（类加载器在加载类信息放到方法区后，会创建一个对应的class类型的对象放到堆中）等信息.还有主类运行过程中，如果使用到其他类，会逐步加载这些类。jar包和war包里的类都是懒加载。 类加载器引导类加载器(BootStrapClassLoader)负责加载支撑JVM运行的位于JRE的lib目录下的核心类库,比如rt.jar、charsets.jar等 扩展类加载器(ExtClassLoader)负责加载支撑JVM运行的位于JRE的lib目录下的ext扩展目录中的jar类包 应用程序加载器(AppClassLoader)负载加载ClassPath路径下的类包,主要加载你自己写的那些类 自定义类加载器负责加载用户自定义路径下的类包 如下代码分别输出BootStrapClassLoader、ExtClassLoader、AppClassLoader.由于引导类加载器是C语言写的所以返回null。 123456System.out.println(String.class.getClassLoader()); System.out.println(com.sun.crypto.provider.DESKeyFactory.class.getClassLoader().getClass().getName());System.out.println(TestJDKClassLoader.class.getClassLoader().getClass().getName());--------------------------------------------nullsun.misc.Launcher$ExtClassLoadersun.misc.Launcher$AppClassLoader 类加载器之间关系 1234567891011 ClassLoader appClassLoader = ClassLoader.getSystemClassLoader(); ClassLoader extClassloader = appClassLoader.getParent(); ClassLoader bootstrapLoader = extClassloader.getParent();System.out.println("the bootstrapLoader : " + bootstrapLoader);System.out.println("the extClassloader : " + extClassloader);System.out.println("the appClassLoader : " + appClassLoader);---------------------------------------------------------the bootstrapLoader : nullthe extClassloader : sun.misc.Launcher$ExtClassLoader@776ec8dfthe appClassLoader : sun.misc.Launcher$AppClassLoader@18b4aac2 如上代码可以看出JVM类加载器是有亲子层级结构的BootStrapClassLoader -&gt; ExtClassLoader -&gt; AppClassLoader -&gt; 自定义类加载器 双亲委派机制 如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委托给自己的父类去完成，一次向上。只有当父类无法完成该加载时，子加载器才会尝试自己去加载该类。这就是类加载的双亲委派机制：先找父亲加载，不行再由儿子自己加载 举例假设现在要加载Math类，最先会找AppClassLoader加载，AppClassLoader会委托ExtClassLoader加载，ExtClassLoader则又会委托BootStrapClassLoader加载，BootStrapClassLoader是顶层引导类加载器，则会在自己的类加载路径里找Math类，没有则退回BootStrapClassLoader，BootStrapClassLoader则会在自己的类加载路径里找Math类，也没有则最后退回到AppClassLoader类加载，最终在AppClassLoader的加载路径里找到Math类，最后就自己加载了。 为什么要设计双亲委派机制？沙箱安全机制这样可以防止核心类被篡改,比如rt.jar里有一个常用的java.lang.String.class类，这样你自己写的相同路径的java.lang.String.class类就不会被加载。 避免类的重复加载当父亲已经加载过的类路径，子类就没有必要再去加载一次,保证被加载类的唯一性。 全盘委托机制如果一个类加载，这个类依赖的其他类，也会一起加载。 自定义类加载器自定义类加载器需要继承 java.lang.ClassLoader 类,这个类有两个核心方法，loadClass(String, boolean)，实现了双亲委派机制。findClass，默认实现是空方法，所以我们自定义类加载器主要是重写findClass方法。自定义类加载器默认父加载器是AppClassLoader。 123456789101112131415161718192021222324public Class&lt;?&gt; loadClass(String var1, boolean var2) throws ClassNotFoundException &#123; int var3 = var1.lastIndexOf(46); if (var3 != -1) &#123; SecurityManager var4 = System.getSecurityManager(); if (var4 != null) &#123; var4.checkPackageAccess(var1.substring(0, var3)); &#125; &#125; if (this.ucp.knownToNotExist(var1)) &#123; Class var5 = this.findLoadedClass(var1); if (var5 != null) &#123; if (var2) &#123; this.resolveClass(var5); &#125; return var5; &#125; else &#123; throw new ClassNotFoundException(var1); &#125; &#125; else &#123; return super.loadClass(var1, var2); &#125; &#125; 1234567891011121314151617181920212223242526272829protected Class&lt;?&gt; findClass(final String name) throws ClassNotFoundException &#123; final Class&lt;?&gt; result; try &#123; result = AccessController.doPrivileged( new PrivilegedExceptionAction&lt;Class&lt;?&gt;&gt;() &#123; public Class&lt;?&gt; run() throws ClassNotFoundException &#123; String path = name.replace('.', '/').concat(".class"); Resource res = ucp.getResource(path, false); if (res != null) &#123; try &#123; return defineClass(name, res); &#125; catch (IOException e) &#123; throw new ClassNotFoundException(name, e); &#125; &#125; else &#123; return null; &#125; &#125; &#125;, acc); &#125; catch (java.security.PrivilegedActionException pae) &#123; throw (ClassNotFoundException) pae.getException(); &#125; if (result == null) &#123; throw new ClassNotFoundException(name); &#125; return result; &#125;]]></content>
      <categories>
        <category>JVM</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Syncronized关键字]]></title>
    <url>%2F2020%2F08%2F15%2FSynchronized%E5%85%B3%E9%94%AE%E5%AD%97%2F</url>
    <content type="text"><![CDATA[概念Syncronized是JVM自带的关键字，主要用来解决线程并的原子性问题。Syncronized保证多个线程并发，在同一时刻只能有一个线程访问临界资源。在多线程可能出现同时访问一个共享、可变资源的情况，这个资源叫临界资源（对象、变量、文件等）。 用法静态方法：类锁,锁得是当前类的class对象普通方法：对象锁,锁得是当前实例对象同步代码块：锁得是括号里的对象 注：一个类只有一个class,可能有多个实例对象. 若一个类有多个静态方法，可能会造成性能影响。 锁升级历史Synchronized在JDK1.6之前性能非常的低，使用的时候需要用户态与内核态的切换。所以Doug li 写了AQS框架，实现了ReentranLock(java语言写的)，性能远远高于JVM自带的Syncronized。之后甲骨文收购了java,觉得Syncronized干不过ReentranLock，为了颜面，在JDK1.6之后对Syncronized进行了优化，即锁的升级，目前Syncronized和ReentranLock的性能五五开。 升级过程锁得状态一共四种：无锁状态、偏向锁、轻量级锁、重量级锁。无锁状态当没有线程访问被syncronized修饰得方法或代码块时，就是无锁状态. 偏向锁当第一个线程访问syncronized修饰的方法或代码块时,锁就进入了偏向模式,此时JAVA对象头里的Mark Word的结构也变为偏向锁结构.当其他线程请求锁的时候，会CAS替换JAVA对象头里的Mark Word里偏向锁的信息，替换成功就获取到锁资源。记录在Mark Word的里的线程再次请求锁资源，不需要做任何同步操作，省去大量锁申请操作，也就提升了性能。 轻量级锁对于锁竞争激烈的场景，偏向锁就失效了。但是JVM并不会立刻升级为重量级锁,会先将Mark Word的结构变为轻量级锁的结构。轻量级锁适应的场景是线程交替执行代码块的场合，如果存在同一时间访问同一锁的场景，就会升级为重量级锁。 重量级锁在轻量级锁失败后，jvm会先进行自选锁的操作。会先让当前想获取锁的线程做空循环,经过一定次数的循环，如果还得不到锁，就只能升级为重量级锁。 注：锁得升级是不可逆的～ 加锁信息锁信息展示（32位虚拟机）]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[volatile关键字]]></title>
    <url>%2F2020%2F08%2F15%2FVolatile%E5%85%B3%E9%94%AE%E5%AD%97%2F</url>
    <content type="text"><![CDATA[概念volatile是Java虚拟机提供的轻量级的同步机制。volatile能保证并发编程的两个问题：可见性和有序性。 可见性 问题：从JMM模型可以知道，线程都是从总内存中加载变量到自己的工作内存，所以在多线程情况下，线程A获取了主内存的共享变量X，线程B也获取了变量X，并且将它修改。这时线程A无法立刻知道自己工作内存里的变量X与主线内存的变量X已经不同。 解决：使用volatile修饰共享变量. 缓存一致性原则MESIM 已修改状态 （加锁成功）E 独占状态 （一个cpu读到）S 共享状态（多个cpu读到）I 失效状态 （收到其他cpu的消息）当其他线程把主内存的值修改后，工作内存的缓存就被消除掉了。底层就是volatile 调用一个lock指令，修改值经过总线的时候会触发缓存一致性协议，将其他工作内存对应的缓存值变为失效状态，其他线程需要读取值需要重新去主内存读取。 防指令重排 12345678910111213public LazySingleton getInstance3() &#123; if (instance == null) &#123; // 实例化对象 加锁 synchronized(LazySingleton.class) &#123; if(instance == null) &#123; instance = new LazySingleton(); &#125; &#125; &#125; // 返回对象 return instance; &#125; 问题:上图是单例模式double check，LazySingleton的实例化需要经过分配空间 -&gt; 初始化 -&gt; 引用赋值,但是JVM底层可能会对其指令重排为分配空间 -&gt; 引用赋值 -&gt; 初始化，这样返回的instance可能只是赋值而未初始化，可能有npe问题。 解决：使用volatile修饰该实例对象. 内存屏障内存屏障，又称内存栅栏，是一个CPU指令，它的作用有两个，一是保证特定操作的执行顺序，二是保证某些变量的内存可见性（利用该特性实现volatile的内存可见性）。由于编译器和处理器都能执行指令重排优化。如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排序，也就是说通过插入内存屏障禁止在内存屏障前后的指令执行重排序优化。Memory Barrier的另外一个作用是强制刷出各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本。 总之，volatile变量正是通过内存屏障实现其在内存中的语义，即可见性和禁止重排优化。]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JMM模型]]></title>
    <url>%2F2020%2F08%2F08%2FJMM%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[什么是JMM模型？JMM模型就是Java内存模型，是一种抽象的概念,并不真实存在。它描述的是一组规则或规范，通过这组规范定义了程序中各个变量（实例字段、静态字段、构成数组对象的元素）的访问方式。JVM运行程序的实体是线程，每当创建线程时JVM都会为其创建一个工作内存,每个线程都有自己独有的工作内存存储私有数据，但是JMM规定所有的变量都存储在主内存，主内存是共享区域，所有线程都可以访问，但是对变量的操作需要在各自的工作内存中操作，操作完后写回主内存,不能直接操作主内存中的变量。 数据同步八大原子操作关于主内存和工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存，如何从工作内存同步到主内存之间的实现,JMM定义了以下8种操作完成。lock(锁定)作用与主内存的变量，把一个变量标记为一条线程独占状态。unlock(解锁)作用与主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。read(读取)将主内存的数据拷贝一份，便于随后的load使用load(载入)将read拷贝的数据加载到工作内存中use(使用)将工作内存中的数据变量给执行引擎进行逻辑修改assign(赋值)将执行引擎修改的值写回线程的工作内存store(存储)将工作内存的值拷贝一份出来write(写入)将store出来的值写回主内存 举例：假设线程A要修改主内存中的变量a = 0 -&gt; a=1首先read将主内存的变量a=0拷贝一份，通过load加载到线程A的工作内存,然后use将工作内存中a=0交给执行引擎，执行引擎将a=0修改为a=1，assign将a=1写回工作内存，store将工作内存中的a=1拷贝一份出来，write将a=1写回主内存。 并发编程三大特性原子性原子性指的是一个操作是不可中断的，即使是在多线程环境下，一个操作一旦开始就不会被其他线程影响。通常使用 synchronized、Lock （ volatile不保证原子性） 可见性当一个线程修改了某个共享变量 的值，其他线程是否能够马上得知这个修改的值。volatile可以解决可见性（保证能否及时看到）。 有序性 有序性是指对于单线程的执行代码，我们总是认为代码的执行是按顺序依次执行的，但对于多线程环境，则可能出现乱序现象，因为程序编译成机器码指令后可能会出现指令重排现象，重排后的指令与原指令的顺序未必一致。volatile可以防止指令重排。]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MVCC机制]]></title>
    <url>%2F2020%2F08%2F01%2FMVCC%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[MVCC概述Mysql在可重复读隔离级别下，同样的sql查询语句在一个事务里多次执行查询结果是相同的，就算其他事物对数据有修改也不会影响当前事物sql语句的查询结果。这个隔离性就是靠MVCC（多版本并发控制）机制保证的，对一行数据的读和写两个操作默认不会通过加锁互斥来保证隔离性，避免了 频繁加锁。 MVCC机制的实现undo日志undo日志版本链是指一行数据被多个事务依次修改后，在每个事务修改完后，mysql会保留修改之前的数据在undo日志，并且用两个隐藏字段trx_id(事务id)和rollpoint（指针）把这些日志记录连接起来，形成一个历史记录版本链。如下图 红色代表id=1的这行历史修改记录，蓝色代表最新数据。undo日志只有一份。 Read-view 一致性视图每个事务开启都会维护一份自己的一致性视图。视图组成执行查询时所有未提交事务的id数组 + 已创建的最大事务id组成 视图生成时机可重复读隔离级别，在第一次查询就会生成Read view。读已提交隔离级别， 每次读都会生成一份最新的Read view 版本对比举例事务里的任何sql查询结果需要从对应的版本链的最新数据开始逐条做对比得到最终的结果。拿上图数据举例：假设事务A的视图为[200] 300，去查询id=1的数据 首先找到蓝色最新的数据,事务id是200,200在事务A的一致性视图中是属于未提交的，所以数据 不可见，再找下一条事务id也是200,还是不可见，逐一比对，到事务id=100时，100不在事务A 的一致性视图里，说明是已提交的事务，所以最终得到的值就是’lilei2’。 版本链对比规则 如果undo日志里的数据行trx_id(事务id)落在绿色部分，说明这个版本是已提交的事务生成的，所以数据可见。如果undo日志里的数据行trx_id(事务id)落在红色部分，说明这个版本是由将来启动的事务生成，肯定不可见。如果undo日志里的数据行trx_id(事务id)落在黄色部分，就需要判断了 a.trx_id在视图数组里，说明这个版本是由还没提交的事务生成的，数据不可见。 b.trx_id不在视图数组里,说明这个版本是已经提交的事务生成的,数据可见。 总结MVCC机制的实现就是通过read-view机制与undo版本链对比机制，使得不同的事务会根据数据版本链对比规则读取同一条数据在版本链上不同版本的数据。]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mysql事务隔离级别与锁机制]]></title>
    <url>%2F2020%2F08%2F01%2FMysql%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8E%E9%94%81%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[为什么要事务隔离与锁机制？数据库一般都会并发执行多个事务，多个事务间可能会并发对相同的一批数据进行增删改查操作，就可能会造成一些事务隔离性问题，例如：脏写、脏读、不可重复读、幻读。 事务及其ACID属性事务是由一组SQL语句组成的逻辑处理单元,具有以下4个属性,简称事务的ACID属性。原子性执行事务操作，一系列对数据修改的操作，这些操作要么全部执行成功，要么全部失败。一致性事务开始到结束，数据必须保持一致性。举例：银行转账操作，两个账户转钱。账户的总金额不会改变。隔离性多个事务之间相互隔离，互相不打扰。（这里可能有许多隔离性问题）永久性事务结束后，数据的修改会永久的保存在数据库里。 事务隔离性问题脏写假设同时开启事务A,B,选择数据表中同一行数据进行修改，A事务先完成了对数据的修改并提交了事务，之后B事务对同一数据也修改提交。最终数据库里的数据是事务B修改的数据。覆盖了A之前修改的数据。就造成了脏写。 脏读两个事务A,B，事务B读到了事务A已经修改但是还没有提交的数据。事务A对数据行进行了修改，但是还没有提交事务。这时事务B读到了A事务还没有提交的事务，还用这个数据去操作。如果A事务回滚了，那这个数据就是无效的。不符合一致性要求。 不可重复读线程AB开启事务，A,B同时读到一行数据，A更新了这条数据，并提交了事务，B还未提交事务，重新去读这行数据，导致B一次事务里两次读到的数据不相同。 幻读幻读类似不可重复读;不可重复读针对查询操作;幻读针对读是插入和删除操作。 事务隔离级别针对以上问题，Mysql数据库提供了一定的事务隔离级别机制来解决。 Mysql数据库默认的隔离级别是可重复读。 查看当前数据库的事务隔离级别: show variables like ‘tx_isolation’; 设置事务隔离级别：set tx_isolation=’REPEATABLE-READ’; MySql锁机制锁详解锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除了传统的计算资源（CPU、RAM、I/O等）竞争外，数据也是一种共享等资源。 锁分类123456从性能上分乐观锁用版本号对比来实现，每次修改数据的时候会先比较读到数据的版本号和最新的版本号是否一致，一致就可以修改，否则不行。乐观锁实际上是不加锁的。悲观锁对数据进行加锁，访问资源需要竞争锁。 12345678从对数据库操作的类型分分为读锁写锁，都是悲观锁。**读锁会阻塞写，写锁会阻塞读和写。读锁读锁也称共享锁，S锁（share），针对同一份数据，多个读操作可以进行而不会相互影响。写锁写锁也称排他锁，X锁（eXclusive），针对同一份数据，写操作没有完成，其他事物的读/写都会堵塞。 12345678从对数据操作的粒度分MyISAM是表锁。InnoDB查询的时候有mvcc机制不会加锁，但是更新、插入、删除操作会加行锁。表锁每次操作都会锁住整张表。找到表就可以加锁，开销小，加锁快。锁的粒度大，不会出现死锁。发生锁冲突的概率最高，**一般用在整表数据的迁移**。行锁每次操作锁住操作涉及到的数据行。需要找到对应的数据行才能加锁，开销大，加锁慢。锁的粒度小，会出现死锁。 锁和事务隔离级别隔离级别设置​ 读未提交 set tx_isolation=’read-uncommitted’;​ 读已提交 set tx_isolation=’read-committed’;​ 可重复读 set tx_isolation=’repeatable-read’;​ 串行化 set tx_isolation=’serializable’; 锁和事务隔离级别可重复读就是假设某一事务对数据行就行了更新操作就会对涉及到的数据行加行锁。序列化只要开启了事务，之后的操作，不管查询操作还是更新操作，对涉及到的数据行全部加行锁，所以性能差。间隙锁因为mysql的默认隔离级别是可重复读，会有幻读的问题。可以引入间隙锁在某些情况下可以解决该问题。 如上表所示间隙就有id为 （3，10）、(10,20)、(20,正无穷)防止幻读就是需要被涉及的数据行加锁update account set name = ‘萧峰666’ where id &gt; 8 and id &lt;18;上述sql会对id值有在（3，10）区间的，也有在（10，20）区间的，所以最终被锁定的区间是（3，20],其他事务没法在这区间插入或修改任何数据。间隙锁只在可重复读隔离级别下才生效。 锁优化 尽可能让所有数据检索都通过索引完成，避免无索引行锁升级为表锁。 合理设计索引，减小锁的范围。 尽可能减小检索条件范围，避免间隙锁。 尽量控制事务大小，减小锁定资源量和时间长度，涉及事务加锁的sql放在事务最后执行。 尽可能低级别事务隔离]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SQL优化]]></title>
    <url>%2F2020%2F07%2F20%2FSQL%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[开发过程中,经常会碰到一些慢sql，性能低，执行时间太长、等待时间太长、sql语句欠佳、索引失效、服务器参数设置不合理需要我们对sql进行适当的优化，所以需要了解如何去优化哈.下面整理了一些mysql的sql结构以及该如何去优化sql。 mysql的逻辑分层原理 连接层 提供与客户端连接的服务 服务层 提供各种用户使用的接口（增删改查）,提供sql优化器 引擎层 提供各种存储数据的方式，例如默认的InnoDB（事务优先，行锁）、MyISAM(效率优先，表锁)等 存储层 存储最终的数据 sql 编写过程select…from…join…on…where…group by…having…order by…limit..sql 解析过程from…on..join…where…group by…having..select…order by…limit.. 核心是优化索引索引定义帮助mysql高效获取数据的数据结构，索引是数据结构. 索引分类​ 主键索引：与唯一基本相同（主键不能为null，唯一可以为null）​ 单值索引：单列（一个表可以有多个单值索引） 唯一索引：不能重复（例如id） 复合索引：多个列构成的索引s 索引优势提高查询效率（降低IO的使用率)降低CPU使用率（索引是排好序的结构，可以直接用） 索引弊端索引本身很大，可以存放在内存/硬盘不是所有情况使用：a.少量数据 b.频繁更新的字段 c.很少使用的字段索引会提高查的效率，会降低增删改的效率 SQL性能问题分析SQL的执行计划：EXPLAIN+SQL12id: 编号id值相同，从上往下顺序执行(表的执行顺序会因为数量改变而改变，原因：笛卡尔积，数据小的表优先查询)，id值不同：越大越优先查询（在查询时先查内层再查外层） 123456select_type: 查询类型 PRIMARY:主查询 SUBQUERY:子查询 SIMPLE:简单查询（不包含主、子查询） DERIVER：衍生查询（使用到临时表,From后面的查询） UNION：在from子查询中table1 union table2（指的table2） 1table: 查询的表 123456789type: 索引类型 system-&gt;const-&gt;eq_ref-&gt;ref-&gt;range-&gt;index-&gt;all（越往左效率越高） Null:MySql底层会对查询进行优化,直接查询常量 system:查询得表里只有一条数据行 const:结果集只有一条数据 （通过主键索引和唯一索引查询） eq_ref:表关联用主键或唯一键 ref:表查询没有用到主键或唯一，但是用到了普通索引，可能返回匹配的多条数据或0条。（从索引的根节点开始找） range:检索指定范围的行，使用一个索引来选择行（between,&lt;,&gt;,=） index:扫描所有的索引（叶子结点全索引扫描），一般去扫二级索引，因为主键索引太大 all:全表读取 1possible_keys: 预测可能使用的索引 1key: 实际使用的索引 12345678910111213141516171819key_len:实际使用的索引的长度（作用：判断复合索引是否完全被使用） 字符串 char(n):3n字节长度 varchar(n):若是utf-8，长度为3n+2 (加的2是存储字符串长度的) 数值类型 thinyint:1字节 smallint:2字节 int:4字节 bigint:8字节 时间类型： date:3字节 timestamp:4字节 datetime:8字节 *如果字段允许为null，还需要加1个字节，记录是否为NULL。*例如：联合索引 name age address name varchar(20) 不为null age int 可为null address char(30) 可为null 则key_len = （20*3+2） + （4+1）+（30*3+1） = 158 1ref: 联合索引关联的字段（可能是个常量值const） 1const:常量 1rows:可能检测到的行数 1234567891011Extra:展示额外信息 性能从好到坏:using index &gt; using where &gt; using temporary | using filesortusing index: 索引覆盖，不读取原文件，只从索引文件中获取（不需要回表查询） （覆盖索引：使用联合索引查找没有回表查）using where: 需要回表查询(需要查询原文件)using filesort（性能损耗大）常见于order by，没有索引需要放在临时表里比较using temporary（性能损耗大，额外多使用临时表）常见于distinct 去重，没有索引需要放在临时表里比较 SQL优化器可能干扰我们的优化SQL的优化主要通过上述的属性去优化，但是SQL优化器可能会干扰我们的优化. 常用SQL优化方法123456789101112131415161718191.加索引 a.索引不能跨列，保持索引的定义和使用一致（根据sql实际解析的顺序，调整索引的顺序，从from开始节气解析）； b.索引要逐步优化 c.范围查询in可能使索引失效，放到where条件最后面2. 多表 a.小表驱动大表 b.索引建立在经常查询的字段 3. 避免索引失效的一些原则 a.复合索引，不要跨列或无序使用（最佳左前缀） b.复合索引，尽量使用全索引匹配 c.不要在索引上进行任何操作（计算，函数，类型转换），否则索引失效 d.复合索引不能使用不等于（!=，&lt;&gt;）或is null，否则索引失效 e.尽量使用索引覆盖（using index） f.like尽量已“常量”开头，不用以“%”开头，否则索引失效（如果必须使用，可以用索引覆盖补救一部分） g.尽量不要使用类型转换（显式，隐式），否则索引失效 h.尽量不要使用or，否则索引失效 注：双层循环：（外层小内层大）性能比（外层大内层小）好 MySql锁机制12345678解决因资源共享而造成的并发问题- 操作类型分： 1.读锁（共享锁）:对同一个数据，多个读操作可以同时进行（买衣服的看） 2.写锁（互斥锁）:如果当前操作没有完毕，则无法进行读写操作（买衣服一系列操作）- 操作范围分： 1.表锁：一次性对一张表整体加锁（myISAM存储引擎），开销小，加锁快，锁的范围大，无死锁，容易发生锁冲突 2.行锁：一次性对一行数据加锁（innoDB存储引擎），开销大，加锁慢，容易出现死锁，不易发生锁冲突 3.页锁]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mysql索引数据结构]]></title>
    <url>%2F2020%2F07%2F18%2FMysql%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[什么是索引？索引是帮助Mysql高效获取排好序的数据结构。 磁盘IO数据库的数据都是存放在本地磁盘里的，每次查询数据都会进行磁盘IO读取数据，将读到的数据加载到内存中比较，Mysql InnoDB默认一次磁盘IO的大小是16K. 调用以下命令查询 SHOW GLOBAL STATUS like &#39;Innodb_page_size&#39;; 索引数据结构二叉树首先看下图 假设需要根据字段col2查询col2=22的数据，select * from table where col2 = 22。 无索引全表查，从上至下 34 -&gt;77 -&gt;55 -&gt;91 -&gt;22 每一次的查询都会进行一次磁盘IO，可以看出上述操作一共进行了5次磁盘IO才找到了col2=22的数据行。 使用二叉树索引看上图右边的树，就是为上述col2字段建立的一个二叉树索引，我们都知道二叉树索引是大的元素放右边，小的元素放左边。 根据索引的查询22，首先会查询到34，判断22&lt;34就会去树的左边结点，再次查询就找到22了，所以上述查询采用索引只用了2次磁盘IO 注：二叉树存储的 key是索引值，value是该索引值对应的数据行地址。缺点根据二叉树结点存放的特点，如果给Col1字段建立二叉树索引，就是如下图所示，形成一个单项的链表结构，这样的查询和全表查询没有什么区别。 平衡二叉树（AVL）为了避免上述二叉树的缺点，进而引入了一种新的数据结构那就是平衡二叉树。 它有一个非常严格的要求：必须保证左右子树高度差不超过1. 它虽然避免了二叉树变成链表结构的尴尬，但是如果数据量非常非常大的情况下，树的层级就会非常的高，这样就会进行多次的磁盘IO,效率就会非常低下，所以AVL也不是Mysql InnoDB的索引结构。 BTreeBTree做了改进就是它每个结点不止一个元素,每个元素不重复，并且每个结点中的元素从左到右依次递增排序。每个结点都有索引和数据。 还是回到原来的问题，当数据量很大的时候，树的层级还是会很深，又会进行多次磁盘IO，效率就低下了。而且查询不稳定，可能第一次IO就查到数据了，也可能在最后一层叶子结点查询到数据。所以它也不是Mysql InnoDB的索引结构。 B+Tree 比较BTree 和B+Tree的结构图可以看出，B+Tree相较于BTree： 数据全都存放在叶子结点。这样可以保证每次磁盘IO读到的索引元素更多，降低树的高度，增加命中率。 还可以可以保证查询效率的稳定。 叶子结点之间有结点指针因为索引都是排好序的，这样可以适用于范围查询，提高效率。 假设下可以存储的索引数量一次IO是16K,假设索引是一个bigint(8B),上图空白格表示下一个磁盘地址（6B） 根节点第一次IO大概：16*1024/(8+6) = 1170 第二次IO:1170 叶子结点中有数据行：假设一行数据1KB，一次IO 16K所以可以放16 这棵树放满大约能放的索引是：1170 1170 16 = 21902400（2千多万） 综上：3层的B+Tree结构可以存放2千多万的索引数据;所以Mysql的InnoDB底层索引结构就是B+Tree. 一些高版本的mysql会将根节点直接加载到内存，查询到时候可以免去第一次磁盘IO.Hash结构 Hash结构底层是数组和链表 建立索引将索引的值进行hash运算，算出该元素所在的桶的位置，然后判断该位置是否有元素，没有就直接塞进去，有的话说明hash冲突，用链表连接。 查询数据查询数据的时候也先将值进行hash运算，找到具体的位置查找。类似于HashMap的底层原理吧。 综上：hash运算非常的开，所以hash结构查询效率非常快，但是它无法支持范围查询。聚集索引与非聚集索引 上述是一行一行的数据… 聚集索引 聚集索引：叶子结点包含数据的，索引和数据放在一起的。 聚集索引的确定（依次选择）：B+tree默认首先获取主键 -&gt; 不为null的唯一键列 -&gt; 默认生成一个id行 非聚集索引 非聚集索引：叶子结点不包含数据的，放的是主键的id。 这样做是为了节约存储空间；也保证一致性，数据行修改了不用两棵树都去修改。 InnoDB 表建立主键，主键通常都用整型且自增的原因用整型的原因：索引用整型比较大小快。 自增的原因：因为叶子结点都是排好序的，如果不自增，可能会导致树结构的自平衡，影响效率。 联合索引/复合索引为什么是最左前缀原理？首先看下联合索引的索引结构图 可以看到联合索引的顺序是：name、age、position 因为索引都是排好序的，按上面的结构，必须先找到name, 假设是Bill，在Bill的基础上，age是排好序的 不然人工直接找age，它就是没有顺序的 综上：联合索引是一级一级查询的，所以按最左前缀原理。]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Idea 查看源码]]></title>
    <url>%2F2020%2F07%2F15%2FIdea%E5%A6%82%E4%BD%95%E7%9C%8B%E6%BA%90%E7%A0%81%2F</url>
    <content type="text"><![CDATA[描述平时开发代码，避开不了需要查看源码，例如JDK、spring的源码那都是精华，非常值我们去推敲学习的，但是在Idea直接点开下载源码是不能在上面做笔记的，所以希望看源码的时候可以把自己理解的内容写注释，方便下次观看立即能回忆起来。而且能够Debug调试。 方法就拿JDK的源码为例。1.找到JDK的zip包然后解压2.打开Idea的SKDs,在sourcepath配置解压好的jdk包3.最后就能在源码写注释了(以HashMap源码为例)]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式之单例模式]]></title>
    <url>%2F2020%2F07%2F15%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[单例模式：保证一个类仅有一个实例，并提供一个全局访问它的全局访问点。应用场景: 线程池、数据库连接等。 单例实现实例单例模式主要分为两种：懒汉式和饿汉式。1.构造方法私有化。2.提供一个全局访问点. 饿汉式123456789101112131415public final class HungrySingleton &#123; // 自行创建实例 private static HungrySingleton instance = new HungrySingleton(); // 构造方法私有化 private HungrySingleton() &#123; &#125; // 通过该函数向整个系统提供获取方法 public HungrySingleton getInstance() &#123; return instance; &#125;&#125; 原理使用static修饰了成员变量instance,这样类初始化的过程中被收集进类构造器即“clinit”方法中，在多线程下JVM会保证只有一个线程会执行clinit方法，其他会阻塞等待。等到唯一的一次clinit方法执行完成，其他线程将不会再执行该方法，转而执行自己的代码。也就是说static修饰的成员变量instatnce只会被初始化一次。 优缺点优点：可以保证多线程情况下实例的唯一性，getInstatce方法直接返回实例，性能非常高。缺点：在类成员变量比较多活比较大的情况下，可能在没有使用类的时候一直占用着堆内存，造成内存的浪费。 懒汉式懒汉模式就是为了避免直接加载类对象造成堆内存浪费的一种单例模式。 情况一12345678910111213141516171819public final class LazySingleton &#123; // 不实例化 private LazySingleton instance = null; // 构造方法实例化 private LazySingleton() &#123; &#125; // 1.原始方法 // 这样虽然避免了类加载提前创建实例，但是在多线程运行下，就会出现多个实例创建的情况。 public LazySingleton getInstance() &#123; if (instance == null) &#123; // 实例化对象 -- 多个线程会创建多个对象 instance = new LazySingleton(); &#125; // 返回对象 return instance; &#125; 情况二123456789101112131415161718192021public final class LazySingleton &#123; // 不实例化 private LazySingleton instance = null; // 构造方法实例化 private LazySingleton() &#123; &#125; // 2.饿汉式 + synchronized // 这样虽然可以避免多线程问题，但是同步锁会增加锁竞争，每次获取实例对象都会通过getInstance方法，带来系统性能开销，导致系统性能下降。 public synchronized LazySingleton getInstance1() &#123; if (instance == null) &#123; // 实例化对象 instance = new LazySingleton(); &#125; // 返回对象 return instance; &#125; 情况三1234567891011121314151617181920212223public final class LazySingleton &#123; // 不实例化 private LazySingleton instance = null; // 构造方法实例化 private LazySingleton() &#123; &#125; // 3.饿汉式 + synchronized 减小锁的粒度 // 在创建实例对象的时候加同步锁，但是依然存在可能创建多个实例，因为在进入null判断的时候可能有多个线程 public LazySingleton getInstance2() &#123; if (instance == null) &#123; // 实例化对象 加锁 -- 这里可能多个线程等待，最终也会导致多个对象创建 synchronized(LazySingleton.class) &#123; instance = new LazySingleton(); &#125; &#125; // 返回对象 return instance; &#125; 情况四1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public final class LazySingleton &#123; // 不实例化 private volatile LazySingleton instance = null; // 构造方法实例化 private LazySingleton() &#123; &#125; // 4.饿汉式 + synchronized double check // 当线程拿到锁准备创建对象时，再判断一次实例是否已经创建。这种方法被称为Double-Check,它可以大大提高懒汉模式性能。 // 但是也不能保证万无一失。以防万一变量添加volatile 防止指令重排序。 // 创建一个对象底层字节码的执行顺序是1.分配空间 2.初始化 3. 引用赋值 -&gt; 指令重排后可能变为1.分配空间 2.引用赋值 3.初始化 当第一个线程引用赋值后，第二个线程进来发现instance不为null,就直接返回使用，但是这时instance可能还 没有初始化，所以可能会npe; public LazySingleton getInstance3() &#123; if (instance == null) &#123; // 实例化对象 加锁 synchronized(LazySingleton.class) &#123; if(instance == null) &#123; instance = new LazySingleton(); &#125; &#125; &#125; // 返回对象 return instance; &#125; /** * 通过内部类实现 * * @return */ // 4.通过内部类实现 // 通过饿汉式可以知道通关键字static修饰变量，在类初始化加载的时候只有一个线程可以执行clinit方法，其他会阻塞等待。 // 所以可以利用这个特性在Singleton类中创建一个内部类来实现。内部类的静态成员变量是懒加载，并且内部类可以调外部类的私有构造方法。 public static class InnerSingleton &#123; private static LazySingleton instance = new LazySingleton(); &#125; public LazySingleton getInstance4() &#123; return InnerSingleton.instance; &#125; // 5.枚举类(核心就是内部类) 情况五123456789101112131415161718public final class LazySingleton &#123; // 不实例化 private volatile LazySingleton instance = null; // 构造方法实例化 private LazySingleton() &#123; &#125; // 5.通过内部类实现 // 通过饿汉式可以知道通关键字static修饰变量，在类初始化加载的时候只有一个线程可以执行clinit方法，其他会阻塞等待。 // 所以可以利用这个特性在Singleton类中创建一个内部类来实现。内部类的静态成员变量是懒加载，并且内部类可以调外部类的私有构造方法。 public static class InnerSingleton &#123; private static LazySingleton instance = new LazySingleton(); &#125; public LazySingleton getInstance4() &#123; return InnerSingleton.instance; &#125; 情况六枚举类(核心就是内部类) 总结其实单例模式的本质就是控制对象实例的个数。懒汉式和饿汉式各有各的优缺点，可以适当根据应用场景使用。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Idea永久破解]]></title>
    <url>%2F2020%2F07%2F15%2FIdea%E6%B0%B8%E4%B9%85%E7%A0%B4%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[描述最近刚好换了工作，要换台电脑工作了，安装了Idea,忘记了原来Idea破解的方法，于是网上查找，果然好记性不如烂笔头，决定总结一下，记录下来。就是把idea激活，不需要使用有期限的激活码. 步骤1.首先下载jetbrains-agent.jar2.在Idea里创建idea.vmoptions3.在idea.vmoptions 填写jetbrains-agent.jar的文件路径4.填写 http://fls.jetbrains-agent.com 最后激活]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[springBoot入门]]></title>
    <url>%2F2019%2F05%2F27%2FspringBoot%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是 Spring Boot 其实不是什么新的框架，它默认配置了很多框架的使用方式，就像 Maven 整合了所有的 Jar 包，Spring Boot 整合了所有的框架。 特点 为基于spring开发提供更快的入门体检. 开箱即用. springBoot不是对spring的增强，而是提供了更快的使用方式 嵌入式服务器，健康检测，安全、外部配置等非功能性特性. 核心功能 起步依赖将具备某一功能的坐标打包到一起，提供默认的功能 自动配置自动帮你配置某个对象需要的配置,例如tomcat的端口号默认8080等 必须引用的坐标123456789父级依赖&lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&lt;version&gt;2.0.3.RELEASE&lt;/version&gt;&lt;relativePath/&gt;&lt;/parent&gt;&lt;/resource&gt; 123456支持web的模块&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; 配置文件springBoot是基于约定的所有很多配置都有默认值，若想使用自己的配置，可以使用配置文件（properties,yml). 1. propertieskey = value 2. yml（yaml）1234567891011121314151617181920212223242526272829303132331.普通数据的配置（冒号后需要空格）name: zhangsan 2. 对象的配置(同一级别的缩进保持一致)person:name: zhangsanage: 18address: hangzhouserver:port: 80883. 行内对象配置(不常用)person： &#123;name: zhangsan,age: 18, address: hangzhou&#125;4.配置数据集合city:- beijing- hangzhou- taizhou- zhoushancity：[beijing,hangzhou,taizhou]5. 配置对象集合数据student:-name: zhangsanage: 18address: hangzhou-name: lisiage: 16address: taizhou6. map配置map:key1: value1key2: value2 加载配置文件的顺序springBoot一些数据会有默认值，如果你想更改则可以使用配置来覆盖，配置文件后加载的也会覆盖之前加载的.它会先加载yml，最后加载properties. 123456789（spring-boot-starter-parent）&lt;resource&gt;&lt;directory&gt;$&#123;basedir&#125;/src/main/resources&lt;/directory&gt;&lt;excludes&gt;&lt;exclude&gt;**/application*.yml&lt;/exclude&gt;&lt;exclude&gt;**/application*.yaml&lt;/exclude&gt;&lt;exclude&gt;**/application*.properties&lt;/exclude&gt;&lt;/excludes&gt;&lt;/resource&gt; 在业务代码中获取配置信息有如下两种方式： @value(“${name}”) 12@Value(&quot;$&#123;oss.endPoint&#125;&quot;)private String endPoint; 12345oss:endPoint: oss-cn-hangzhou-internal.aliyuncs.comaccessKeyId: ALIYUN_ACCESS_KEYaccessKeySecret: ALIYUN_SECRET_KEYdefaultBucket: salary-prod @ConfigurationProperties(prefix =”person”) 需要set,get方法 12345678910111213141516@Configuration@ConfigurationProperties(prefix = &quot;redis&quot;)public class RedisConfig &#123;private String clusterNodes;private String redisHost;private int redisPort;private String redisPasswd;set()..get()..&#125; 1234567redis:clusterNodes:redisHost: r-bp1d75e29eop202ee4.redis.rds.aliyuncs.comredisPort: 6377redisPasswd: REDIS_PASSWORDtimeout: 3000database: 0]]></content>
      <categories>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[excel读写及Zip打包下载]]></title>
    <url>%2F2019%2F01%2F02%2Fexcel%E8%AF%BB%E5%86%99%E5%8F%8AZIp%E6%89%93%E5%8C%85%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[针对2019个税专项附加扣除做的需求：帮助Hr快速收集员工申报信息，及处理信息，由员工填写表单提交信息，对信息进行处理写入到个税局提供的个税专项附加扣除信息excel模版，最后ZIP打包导出. 大致思路首先需要收集处理员工数据，将excel模版放在服务器上，导出时在服务器上创建一个临时文件夹，读取模版excel文件,将数据循环写入excel模版中(一个员工对应一张excel),将写好数据的excel文件流依次写入该文件夹中，接着打包下载该文件夹，最后删除这个临时文件夹. 将excel模版放在服务器上将个税局提供的模版放到服务器上，用于读取 收集处理导出的数据数据是map形式，userId-data,一个员工对应自己的数据 在服务器上创建一个临时文件夹打包时需要一个文件夹存放一个个excel文件 将数据写入循环数据，获取excel模版，创建WorkBook写入数据 处理excel将写好的excel文件命名并写到临时文件夹去 zip打包下载写完所有数据后，对该临时文件夹打包导出 删除文件导出后删除临时文件夹 相关代码主要流程12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364public static void writeDataToModelExcel(HttpServletRequest request, HttpServletResponse response, Map&lt;String, SalaryTaxExportVO&gt; dataMap, String corpId, String opUserId) throws Exception &#123;final String folderPath = PATH + FILE_NAME_SPECIAL + LINE + corpId + LINE + opUserId + LINE + UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);try &#123;//创建唯一临时文件夹路径//创建扣件单位文件路径集合List&lt;String&gt; companyPathList = Lists.newArrayList();//遍历数据写入excelfor (Map.Entry&lt;String, SalaryTaxExportVO&gt; entry : dataMap.entrySet()) &#123;//获取模版文件excelClassPathResource classPathResource = new ClassPathResource(&quot;xls/latestSalaryTaxDeductTemplate.xls&quot;);//LOGGER.warn(&quot;qqqqq&quot; + Cipher.getMaxAllowedKeyLength(&quot;AES&quot;));Workbook wb = WorkbookFactory.create(classPathResource.getInputStream());//3.获取数据SalaryTaxExportVO salaryTaxExportVO = entry.getValue();String userId = salaryTaxExportVO.getUserId();//将数据写到excel模版中writeDataToTemplate(salaryTaxExportVO, wb);//将文件写入服务器(创建临时文件夹)File newFile = new File(folderPath);if (!newFile.exists()) &#123;boolean mkdirs = newFile.mkdirs();if (!mkdirs) &#123;throw new ExcelException(&quot;文件路径生成失败&quot;);&#125;&#125;//获取扣缴单位名称 地区 身份证String companyName = salaryTaxExportVO.getCompanyName();if(StringUtils.isBlank(companyName))&#123;companyName = &quot;无扣缴单位&quot;;&#125;String area = salaryTaxExportVO.getArea();String certNo = salaryTaxExportVO.getCertNo();//创建扣缴单位文件路径String companyPath = folderPath + SYMBOL + companyName + SYMBOL;if (!companyPathList.contains(companyPath)) &#123;File file = new File(companyPath);if (!file.exists()) &#123;file.mkdirs();&#125;companyPathList.add(companyPath);&#125;// 向扣缴单位文件夹写文件 地区+扣缴单位名称+个人身份号码List&lt;String&gt; names = Lists.newArrayList();names.add(area);names.add(companyName);names.add(certNo);names.add(&quot;.xls&quot;);String fileName = StringUtils.join(names.stream().filter(Objects::nonNull).collect(Collectors.toList()), &quot;&quot;);FileOutputStream out = new FileOutputStream(companyPath + fileName);wb.write(out);wb.close();&#125;// 获取zip文件名称 （余杭、建德）+扣缴单位名称String folderName = &quot;个人所得税专项附加扣除申报文件.zip&quot;;//打包下载文件packToDownload(request, response, folderName, folderPath);&#125; catch (Exception e) &#123;LOGGER.error(&quot;writeDataToModelExcel error, corpId=&#123;&#125;, userId=&#123;&#125;.&quot;, corpId, opUserId,e);throw e;&#125; finally &#123;// 删除文件delFolder(folderPath);&#125;&#125; 创建zip包123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384/*** 创建ZIP文件** @param folderPath 文件或文件夹路径*/private static void packToDownload(HttpServletRequest request, HttpServletResponse response, String folderName, String folderPath) &#123;try (ServletOutputStream outputStream = response.getOutputStream();ZipOutputStream zos = new ZipOutputStream(outputStream)) &#123;//设置响应头,必须在写文件前DownloadUtil.setFileDownloadHeader(request, response, folderName);writeZip(new File(folderPath), &quot;&quot;, zos);&#125; catch (Exception e) &#123;LOGGER.error(&quot;TaxDeductExcelUtil packToDownload 创建ZIP文件失败&quot;, e);&#125;&#125;/****写文件*/private static void writeZip(File file, String parentPath, ZipOutputStream zos) &#123;if (file.exists()) &#123;if (file.isDirectory()) &#123;//处理文件夹String filename = file.getName();if (filename.contains(FILE_NAME_SPECIAL))&#123;filename = &quot;个人所得税专项附加扣除申报文件&quot;;&#125;parentPath += filename + File.separator;File[] files = file.listFiles();if (files.length != 0) &#123;for (File f : files) &#123;writeZip(f, parentPath, zos);&#125;&#125; else &#123; //空目录则创建当前目录try &#123;zos.putNextEntry(new ZipEntry(parentPath));&#125; catch (IOException e) &#123;LOGGER.error(&quot;TaxDeductExcelUtil packToDownload 创建ZIP文件失败&quot;, e);&#125;&#125;&#125; else &#123;FileInputStream fis = null;try &#123;fis = new FileInputStream(file);ZipEntry ze = new ZipEntry(parentPath + file.getName());zos.putNextEntry(ze);byte[] content = new byte[1024];int len;while ((len = fis.read(content)) != -1) &#123;zos.write(content, 0, len);zos.flush();&#125;&#125; catch (Exception e) &#123;LOGGER.error(&quot;TaxDeductExcelUtil packToDownload 创建ZIP文件失败&quot;, e);&#125; finally &#123;try &#123;if (fis != null) &#123;fis.close();&#125;&#125; catch (Exception e) &#123;LOGGER.error(&quot;TaxDeductExcelUtil packToDownload 创建ZIP文件失败&quot;, e);&#125;&#125;&#125;&#125;&#125;/****设置响应头*/public static void setFileDownloadHeader(HttpServletRequest request, HttpServletResponse response, String fileName) &#123;final String userAgent = request.getHeader(&quot;User-Agent&quot;);try &#123;String finalFileName = getEncodeFileName(userAgent, fileName);response.setContentType(&quot;application/octet-stream&quot;);response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; &quot; + finalFileName);&#125; catch (Exception ignored) &#123;&#125;&#125; 删除文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/*** 删除文件** @param folderPath* @return*/private static void delFolder(String folderPath) &#123;try &#123;//删除完里面所有内容delAllFile(folderPath);java.io.File myFilePath = new java.io.File(folderPath);//删除空文件夹myFilePath.delete();&#125; catch (Exception e) &#123;LOGGER.error(&quot;TaxDeductExcelUtil delFolder 删除文件失败&quot;, e);&#125;&#125;private static boolean delAllFile(String path) &#123;boolean flag = false;File file = new File(path);if (!file.exists()) &#123;return false;&#125;if (!file.isDirectory()) &#123;return false;&#125;String[] tempList = file.list();if (ArrayUtils.isEmpty(tempList)) &#123;return true;&#125;for (String aTempList : tempList) &#123;File temp;if (path.endsWith(File.separator)) &#123;temp = new File(path + aTempList);&#125; else &#123;temp = new File(path + File.separator + aTempList);&#125;if (temp.isFile()) &#123;temp.delete();&#125;if (temp.isDirectory()) &#123;//先删除文件夹里面的文件delAllFile(path + &quot;/&quot; + aTempList);//再删除空文件夹delFolder(path + &quot;/&quot; + aTempList);flag = true;&#125;&#125;return flag;&#125; 注意点 创建临时文件时，一定要保证文件名唯一（防止同一时间并发，导出串数据），这里采用了corpId-userId-UUID 后缀.xls表示07之前的版本 使用HSSFWookBook，.xlsx是07之后的版本XSSFWookBook，这里使用POI兼容的方式，自动帮你识别：Workbook wb = WorkbookFactory.create(classPathResource.getInputStream())； 在循环中每写完一个excel都要关流 wb.close() — 因为是多个excel 最后一定要删除服务器上的文件（防止文件堆积占用内存） HSSF对excel函数方法较多不支持导致导出的文件一些版本的excel内容不可读，不过用WPS可以正常打开 设置响应头,必须在写文件前 JCE策略文件-读取excel加密文件时，jdk版本需要在”1.8.0_161以上，否则需要安装第三方jar包（US_export_policy.jar , local_policy.jar ）]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[maven基本知识]]></title>
    <url>%2F2018%2F12%2F23%2Fmaven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[maven是项目管理工具，主要有两个特性: 依赖管理和一键构建. 依赖管理依赖管理就是对jar包的管理过程.传统的工程项目是直接放置jar包，maven工程真正的jar包在仓库中放置，项目中只放置jar包的坐标(pom.xml). 仓库分三类 ：本地仓库,远程仓库【私服】,中央仓库.本地仓库是我们运行项目第一步必须本地仓库有对应的坐标，如果没有默认自动去中央仓库下载，在公司中会先从远程仓库下载，远程仓库没有，会从中央仓库下载或本地上传. 1234567891011121314151617&lt;project ….&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;com.dintalent.salary&lt;/groupId&gt; &lt;artifactId&gt;mavenDemo&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;mavenDemo&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt;&lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;/dependencies&gt;&lt;/project&gt; groupId : 标识公司,组织,团体(taobao.com对应com.taobao,apche.org对应org.apache) artifactId ：工程名 version :版本号 （SNAPSHOT表示测试版本） packaging ： 打成什么包(jar,war,pom) scope : 依赖范围（例如test 表示对测试代码classpath有效） 一键构建一键构建就是我们使用maven集成的tomcat插件对项目进行编译，测试，打包，安装等操作. 清理生命周期：clean 默认生命周期：compile(编译),test(测试),package(打包),install(安装). jar包冲突问题简单理解就是应用程序依赖的同一个jar包出现了多个不同的版本，选择了错误的版本导致JVM加载不到类或加载了错误版本的类. 直接依赖： A项目导入了B包，A直接依赖B包 传递依赖： A项目导入了B包，B包直接依赖C包，最终A可以使用C 解决jar冲突的三个原则 第一声明原则：哪个jar包的坐标靠上，这个jar包就是第一声明的包，最终进入项目的就是它. 路径近者优先原则：直接依赖路径比传递依赖近，进入项目的就是路径近的. 直接排除法： 使用标签直接排除某个包的依赖包.]]></content>
      <categories>
        <category>Maven</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[自定义注解简单使用]]></title>
    <url>%2F2018%2F10%2F21%2F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[需要对一些用户行为的接口进行日志埋点统计,如果在业务代码写的话代码比较杂乱,而且之后改动也不方便,于是便决定使用自定义注解，使用spring的切面注解@Aspect. 注解的定义Java文件叫做Annotation，用@interface表示。 元注解@interface上面按需要注解上一些东西，包括@Retention、@Target、@Document、@Inherited四种. @Target 表示该注解可以用于什么地方 @Retention 注解的声明周期，用于定义注解的存活阶段，可以存活在源码级别、编译级别(字节码级别)、运行时级别 @Document 将注解包含在Javadoc中 @Inherited 允许子类继承父类中的注解 自定义注解 基于注解的知识，自己创建一个注解 实现过程首先创建一个自定义注解 -&gt; 采用spring的@Aspect创建一个切面类,在这个切中获取信息并且打印日志 -&gt; 在记录的接口上写上注解 简单示例代码 参考：项目中的操作日志的方法]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java8新特性Lambda和Stream]]></title>
    <url>%2F2018%2F09%2F18%2FJava8%E6%96%B0%E7%89%B9%E6%80%A7Lambda%E5%92%8CStream%2F</url>
    <content type="text"><![CDATA[目前项目应用的是Java 1.8版本,在项目中看到其他小伙伴使用了奇特的编码方式，许多行代码简化成了一行，原来是Java8的特性Lambda和Stream,结合代码和网上查资料学习了一下，并将相关的的知识做了下总结. lambda表达式lambda简单的理解就是一个匿名方法，一段带有输入参数的可执行语句块. 语法：（）-&gt; {} (小括号里是参数，大括号里是方法体) 特点：1.参数类型可以省略，编译器可以从上下文环境中推断出来 2.当lambda表达式的参数个数只有一个的时候，小括号可以省略 3.当lambda表达式只包含一条语句时，可以省略大括号，return，语句结尾的分号 4.lambda表达式可以访问外部变量，但是要求这个变量不可变（final修饰） 方法引用：1.类实例引用： Person::getName 2.类静态方法引用：Max::max 构造器引用：Person::new（等同于 x-&gt;new Person(x)） StreamStream（流）是一个来自数据源的元素队列并支持聚合操作。数据源一般是数组或集合等，进行聚合操作可以获取想要的结果。 基本步骤：获取一个数据源（source）-&gt; 数据转化 -&gt; 执行操作获取想要的结果.(简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果) 创建Stream1.Stream静态方法：Stream.of(); 2.Collection子类获取Stream（最常用）：list.Stream(); Stream流操作 *Intermediate（中间）: 一个流可以跟多个中间操作，主要是打开流对数据进行某种映射或过滤.常见操作: map() - 对stream里的元素进行映射转化 filter() - 对Stream包含对元素按给定的条件过滤 distinct() - 对stream包含对元素进行去重 sorted() - 对stream包含对元素排序 peek() - 生成一个包含原Stream的所有元素的新Stream，同时会提供一个消费函数（Consumer实例），新Stream每个元素被消费的时候都会执行给定的消费函数 limit() - 对Stream里的元素取前n个 skip(n) - 对stream里的元素丢弃前n个，获取之后的元素 parallel() - 将一个顺序执行的流转变成一个并发的流（还有一种Collection.parallelStream()） sequential() - 一个并行流转换成一个顺序流 unordered() - 实现无序流 Terminal(终端): 一个流只能有一个终端操作，这是流对最后一个操作，用来处理结果数据。常见操作: forEach() - 遍历结果数据（并行处理） forEachOrdered - 遍历结果数据（顺序处理） toArray（） - 将数据输入到数组中 reduce（） - 把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合 collect（） - 实现了很多归约操作，例如将流转换成集合和聚合元素 count() - 获取stream里的元素个数 min() - 最小值 max() - 最大值 anyMatch() - Stream中是否存在任何一个元素满足匹配条件 allMatch() - 是不是Stream中的所有元素都满足给定的匹配条件 noneMatch() - 是不是Stream中的所有元素都不满足给定的匹配条件 findFirst() - 返回Stream中的第一个元素，如果Stream为空，返回空Optional findAny() - 返回这个Stream中，取到的任何一个对象 简单示例代码 七牛云大坑逼！！！！！ 参考：https://yuque.antfin-inc.com/mdc/doc/rhihn7]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mac系统Idea常用快捷键]]></title>
    <url>%2F2018%2F09%2F09%2FMac%E7%B3%BB%E7%BB%9F%E4%B8%8BIdea%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[之前一直使用的Java编译工具是eclipse,进新公司之后,公司配了一台Mac并且后端都用IntelliJ IDEA开发,不能脱离团队呀,果断入手了IDEA,不得不说比eclipse更加的智能好用,为了提高开发效率，所以决定整理一下IDEA的常用快捷键,不想每次都配,所以就决定用IDEA默认的快捷键,用的是Mac OS X 10.5+ 但是Mac系统中与IDEA的快捷键有些冲突,可以把Mac相关冲突的快捷键更改或取消掉.下面整理了平常开发中常用的快捷键，以便于更好的记忆和熟练使用. Mac键盘符号和修饰健说明⌘ Command⇧ Shift⌥ Option⌃ Control↩︎ Return/Enter⌫ Delete⌦ 向前删除键（Fn+Delete）↑ 上箭头↓ 下箭头← 左箭头→ 右箭头⇞ Page Up（Fn+↑）⇟ Page Down（Fn+↓）Home Fn + ←End Fn + →⇥ 右制表符（Tab键）⇤ 左制表符（Shift+Tab）⎋ Escape (Esc) Editing编辑123456789101112131415161718192021222324252627282930Control+Space 基本的代码补全(补全任何类,方法,变量) 注意这里与Mac系统的输入法快捷键冲突Control+Shift+Space 智能代码补全 (过滤器方法列表和变量的预期类型）Command+Shift+Enter 自动结束代码,行末添加分号Command+P 显示方法的参数Control+J 快速显示文档Command+鼠标放在代码上 显示代码简要信息Command+N 生成代码（getter、setter、构造函数、hashCode/equals,toString,实现接口方法）这个还有其他快捷键我只记这一种了Control+O 覆盖方法(重写父类方法)Control+I 实现接口方法(我直接记Command+N,也能实现接口方法)Command+Option+T 包围代码(try catch,if else,do while等)Command+/ 行注释代码(再按一次就是取消注释)Command+Option+/ 块注释Option+方向上 连续选中代码块Option+方向下 减少选中的代码块Control+Shift+Q 显示上下文信息Option+Enter 显示意向动作和快速修复代码Command+Option+L 格式化代码Control+Option+O 优化importTab 缩进代码Command+C 复制Command+V 粘贴Command+X 剪切Command+D 复制当前行或选定的块Command+Delete 删除当前行或选定的行的块Control+Shift+J 智能的将代码拼接成一行Command+Enter 智能的拆分拼接的行Command+加号/减号 展开/折叠代码块Command+Shift+加号/减号 展开/折叠所有代码块Command+W 关闭活动的编辑器选项Command+Shift+上下 上下移动代码 Search/Replace（查询/替换)1234Command+F 文件内查找Command+Shift+F 全局查找Command+G 查找模式下向下查找Command+Shift+G 查找模式下向上查找 Usage Search（使用查询）1234Option+F7 在文件中查找用到的地方Command+F7 在类中查找用到的地方Command+Shift+F7 在类中显示(颜色标记)用到的地方Command+Option+F7 显示用法 Compile and Run（编译和运行）12345Command+F9 编译ProjectCommand+Shift+F9 编译选择的文件,包或模块Control+Option+R 弹出Run的可选菜单Control+Option+R 弹出Debug的可选菜单Control+D 调试 Debug调试123456F8 进入下一步,不进入当前方法内F7 进入下一步,如果当前断点式方法,则进入方法内Shift+F8 跳出Option+F9 运行到光标停留处F9 放开debug Command+Shift+F8 查看断点信息 Navigation（导航）123456Shift+Shift 查找文件Command+L 跳转行Command+E 显示最近打开的文件记录列表Command+Option+方向键左/右 退回/前进到上一个操作的地方Command+B 或Command+鼠标左键 进入方法或变量的接口或是定义处Command+Option+B 越过接口,直接跳掉实现处 Refactoring（重构）1234F5 复制文件到指定目录Command+delete 在文件上安全删除文件,弹出确认框Shift+F6 重命名文件Command+Option+M 将选中的代码提取为方法 General（通用）1Command+, 打开idea系统设置]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
  </entry>
</search>
